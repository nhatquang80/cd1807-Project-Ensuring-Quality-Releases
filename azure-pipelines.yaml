name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: MyAgentPool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'udacity-ensuring-quality-releases'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@1
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: 'latest'

    # Install SSH key
    - task: InstallSSHKey@0
      displayName: Security Access
      inputs:
        knownHostsEntry: $(public_key)'
        sshPublicKey: '$(public_key)'
        sshKeySecureFile: 'id_rsa'
    
    - task: Bash@3
      displayName: Check environment variables
      inputs:
        targetType: 'inline'
        script: 'env | sort'
      env:
        TF_VAR_access_key: '$(access_key)'
        TF_VAR_client_id: '$(client_id)'
        TF_VAR_client_secret: '$(client_secret)'
        TF_VAR_subscription_id: '$(subscription_id)'
        TF_VAR_tenant_id: '$(tenant_id)'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV4@4
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendType: azurerm
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'tfstate-rg'
        backendAzureRmStorageAccountName: 'udacitytfstate1422'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: TerraformTaskV4@4
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # Run Terraform Plan
    - task: TerraformTaskV4@4
      displayName: Terraform plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
      env:
        TF_VAR_access_key: '$(access_key)'
        TF_VAR_client_id: '$(client_id)'
        TF_VAR_client_secret: '$(client_secret)'
        TF_VAR_subscription_id: '$(subscription_id)'
        TF_VAR_tenant_id: '$(tenant_id)'

    # Run Terraform Apply
    - task: TerraformTaskV4@4
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
      env:
        TF_VAR_access_key: '$(access_key)'
        TF_VAR_client_id: '$(client_id)'
        TF_VAR_client_secret: '$(client_secret)'
        TF_VAR_subscription_id: '$(subscription_id)'
        TF_VAR_tenant_id: '$(tenant_id)'

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  - deployment: FakeRestAPI
    environment: 
      name: 'test'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appName: 'udacity-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
              deploymentMethod: zipDeploy
          #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          # - task: CmdLine@2
          #   inputs:
          #     script: |
          #       pwd
          #       wget "https://apache.mirrors.lucidnetworks.net//jmeter/binaries/apache-jmeter-5.6.2.tgz"
          #       tar -xf apache-jmeter-5.6.2.tgz
          #       unzip -o $(Build.BuildId)-perftests.zip
          #       ./apache-jmeter-5.6.2/bin/jmeter -n -t automatedtesting/jmeter/stress-test.jmx -j stress-test-jmeter.log -l stress-test-result.csv -e -f -o log/jmeter/stress-test-html-report
          #       ./apache-jmeter-5.6.2/bin/jmeter -n -t automatedtesting/jmeter/endurance-test.jmx -j endurance-test-jmeter.log -l endurance-test-result.csv -e -f -o log/jmeter/endurance-test-html-report                                                                    
          #     workingDirectory: $(Pipeline.Workspace)/drop-perftests
              
  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name: test
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          # - download: current
          #   artifact: drop-uitests
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                cd ~/
                DIR=/home/testuser/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                mv /home/testuser/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
                cd app
                unzip -o $(Build.BuildId)-uitests.zip
                FILE=/home/testuser/app/chromedriver_linux64.zip
                if [ ! -f "$FILE" ]; then
                    LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                    wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                    unzip -o chromedriver_linux64.zip
                    sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                fi
                # export PATH=$PATH:/home/testuser/app
                # echo "Starting Selenium Tests"
                # python3 uitest.py >> selenium.log
                # echo "Completed Selenium Tests. Check selenium.log for results."

#--------------------------------------------#  
# TEST STAGE
#--------------------------------------------#    
- stage: Test
  jobs:
  - job: TestNewMan
    steps:
    #--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run Validation_Test.json -e Env.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Regression Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run Regression_Test.json -e Env.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    - task: CmdLine@2
      inputs:
        script: 'ls -la ./Results/'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      displayName: 'Publish Newman test results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        # searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        mergeTestResults: true
        testRunTitle: "Newman Test Results"

#--------------------------------------------#  
# DESTROY STAGE
#--------------------------------------------#  
- stage: Destroy
  jobs:
  - job: DestroyInfrastructure
    condition: true
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@1
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: 'latest'

    # Install SSH key
    - task: InstallSSHKey@0
      displayName: Security Access
      inputs:
        knownHostsEntry: $(public_key)'
        sshPublicKey: '$(public_key)'
        sshKeySecureFile: 'id_rsa'
    
    - task: Bash@3
      displayName: Check environment variables
      inputs:
        targetType: 'inline'
        script: 'env | sort'
      env:
        TF_VAR_access_key: '$(access_key)'
        TF_VAR_client_id: '$(client_id)'
        TF_VAR_client_secret: '$(client_secret)'
        TF_VAR_subscription_id: '$(subscription_id)'
        TF_VAR_tenant_id: '$(tenant_id)'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV4@4
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendType: azurerm
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'tfstate-rg'
        backendAzureRmStorageAccountName: 'udacitytfstate1422'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    - task: TerraformTaskV4@4
      displayName: Terraform destroy
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
      env:
        TF_VAR_access_key: '$(access_key)'
        TF_VAR_client_id: '$(client_id)'
        TF_VAR_client_secret: '$(client_secret)'
        TF_VAR_subscription_id: '$(subscription_id)'
        TF_VAR_tenant_id: '$(tenant_id)'