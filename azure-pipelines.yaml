name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: MyAgentPool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'udacity-ensuring-quality-releases'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    displayName: Build Infrastructure
    steps:
    # #--------------------------------------------#  
    # # Use Terraform to create the Infrastructure      
    # # Install Terraform on the pipeline agent 
    # - task: TerraformInstaller@1
    #   displayName: 'Terrafom installation'
    #   inputs:
    #     terraformVersion: 'latest'

    # # Install SSH key
    # - task: InstallSSHKey@0
    #   displayName: Security Access
    #   inputs:
    #     knownHostsEntry: $(public_key)'
    #     sshPublicKey: '$(public_key)'
    #     sshKeySecureFile: 'id_rsa'
    
    # - task: Bash@3
    #   displayName: Check environment variables
    #   inputs:
    #     targetType: 'inline'
    #     script: 'env | sort'
    #   env:
    #     TF_VAR_access_key: '$(access_key)'
    #     TF_VAR_client_id: '$(client_id)'
    #     TF_VAR_client_secret: '$(client_secret)'
    #     TF_VAR_subscription_id: '$(subscription_id)'
    #     TF_VAR_tenant_id: '$(tenant_id)'
    
    # # Run Terraform Init on the pipeline agent 
    # # ToDo: Replace the resource group name, storage account name, and container name below
    # - task: TerraformTaskV4@4
    #   displayName: 'Terrafom init'
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'init'
    #     backendType: azurerm
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     backendServiceArm: '$(azureServiceConnectionId)'
    #     backendAzureRmResourceGroupName: 'tfstate-rg'
    #     backendAzureRmStorageAccountName: 'udacitytfstate1422'
    #     backendAzureRmContainerName: 'tfstate'
    #     backendAzureRmKey: 'test.terraform.tfstate'

    # - task: TerraformTaskV4@4
    #   displayName: Terraform validate
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'validate'

    # # Run Terraform Plan
    # - task: TerraformTaskV4@4
    #   displayName: Terraform plan
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'plan'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
    #   env:
    #     TF_VAR_access_key: '$(access_key)'
    #     TF_VAR_client_id: '$(client_id)'
    #     TF_VAR_client_secret: '$(client_secret)'
    #     TF_VAR_subscription_id: '$(subscription_id)'
    #     TF_VAR_tenant_id: '$(tenant_id)'

    # # Run Terraform Apply
    # - task: TerraformTaskV4@4
    #   displayName: Terraform apply
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'apply'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
    #   env:
    #     TF_VAR_access_key: '$(access_key)'
    #     TF_VAR_client_id: '$(client_id)'
    #     TF_VAR_client_secret: '$(client_secret)'
    #     TF_VAR_subscription_id: '$(subscription_id)'
    #     TF_VAR_tenant_id: '$(tenant_id)'

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
# - stage: Deploy
#   jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # - deployment: FakeRestAPI
  #   displayName: FakeRestAPI
  #   environment:
  #     name: test
  #     resourceType: VirtualMachine
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: AzureWebApp@1
  #           displayName: 'Deploy Azure Web App'
  #           inputs:
  #             azureSubscription: '$(azureServiceConnectionId)'
  #             appName: 'udacity-AppService'
  #             appType: webApp
  #             package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  #             deploymentMethod: zipDeploy
          #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          # - task: CmdLine@2
          #   inputs:
          #     script: |
          #       pwd
          #       wget "https://apache.mirrors.lucidnetworks.net//jmeter/binaries/apache-jmeter-5.6.2.tgz"
          #       tar -xf apache-jmeter-5.6.2.tgz
          #       unzip -o $(Build.BuildId)-perftests.zip
          #       ./apache-jmeter-5.6.2/bin/jmeter -n -t automatedtesting/jmeter/stress-test.jmx -j stress-test-jmeter.log -l stress-test-result.csv -e -f -o log/jmeter/stress-test-html-report
          #       ./apache-jmeter-5.6.2/bin/jmeter -n -t automatedtesting/jmeter/endurance-test.jmx -j endurance-test-jmeter.log -l endurance-test-result.csv -e -f -o log/jmeter/endurance-test-html-report                                                                    
          #     workingDirectory: $(Pipeline.Workspace)/drop-perftests
              
  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  # - deployment: VMDeploy
  #   displayName: Selenium Tests
  #   environment:
  #     name: test
  #     resourceType: VirtualMachine
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         # - download: current
  #         #   artifact: drop-uitests
            
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |           
  #               #! /bin/bash
                
  #               # sudo apt-get upgrade -y
  #               # sudo apt-get install python-pip -y
  #               # sudo apt-get install unzip -y
  #               # sudo apt-get install -y chromium-browser
  #               # pip install selenium

  #               cd ~
  #               pwd
  #               DIR=/home/azureuser/app
  #               if [ ! -d "$DIR" ]; then
  #                   mkdir app
  #               fi
  #               # mv /home/azureuser/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
  #               cd app
  #               # unzip -o $(Build.BuildId)-uitests.zip
  #               FILE=/home/azureuser/app/chromedriver_linux64.zip
  #               if [ ! -f "$FILE" ]; then
  #                   LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
  #                   wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
  #                   unzip -o chromedriver_linux64.zip
  #                   sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
  #               fi
  #               # export PATH=$PATH:/home/azureuser/app
  #               # echo "Starting Selenium Tests"
  #               # python3 uitest.py >> selenium.log
  #               # echo "Completed Selenium Tests. Check selenium.log for results."

#--------------------------------------------#  
# TEST STAGE
#--------------------------------------------#    
# - stage: Test
#   jobs:
#   - job: TestNewMan
#     displayName: Postman Tests
#     steps:
#     - task: NodeTool@0
#       displayName: Install Node v18.X
#       inputs:
#         versionSpec: '18.x'
#         checkLatest: true
#     #--------------------------------------------#    
#     # Postman - Install Newman    
#     # ToDo: Update the command and verify the working directory
#     - task: CmdLine@2
#       displayName: Install Newman
#       inputs:
#         script: 'npm install -g newman'
#         workingDirectory: $(System.DefaultWorkingDirectory)
#     # Postman Data Validation Test Suite    
#     # ToDo: Verify the working directory
#     - task: CmdLine@2
#       displayName: Run Data Validation Tests
#       continueOnError: true
#       inputs:
#         script: 'newman run Validation_Test.json -e Env.json --reporters cli,junit --reporter-junit-export Results/TEST-DataValidation.xml'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#     # Postman Regression Test Suite    
#     # ToDo: Verify the working directory
#     - task: CmdLine@2
#       displayName: Run Regression Tests
#       continueOnError: true
#       inputs:
#         script: 'newman run Regression_Test.json -e Env.json --reporters cli,junit --reporter-junit-export Results/TEST-Regression.xml'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#     - task: CmdLine@2
#       inputs:
#         script: 'ls -la ./Results/'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#     # Postman - Publish Results 
#     # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
#     - task: PublishTestResults@2
#       displayName: 'Publish Newman test results'
#       inputs:
#         testResultsFormat: 'JUnit'
#         testResultsFiles: '**/TEST-*.xml'
#         # searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#         mergeTestResults: true
#         testRunTitle: "Newman Test Results"

# - stage: JMeterTests
#   displayName: JMeter Tests
#   jobs:
#   - deployment: JMETERTests
#     displayName: Test JMeter
#     environment:
#       name: test
#       resourceType: VirtualMachine
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             displayName: 'Download Perf Test'
#             artifact: drop-perftests
#           - bash: |
#               unzip -o $(Pipeline.Workspace)/drop-perftests/$(Build.BuildId)-perftests.zip -d .
#               sudo apt-get install openjdk-11-jre-headless -y
#               sudo apt-get install zip
#               java -version
#               wget https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.2.tgz -O jmeter.tgz
#               tar xzvf jmeter.tgz
#               apache-jmeter-5.6.2/bin/jmeter --version
#               mkdir -p log/jmeter
#               pwd
#               ls -la
#             displayName: Install JMeter
#           - bash: |
#               pwd
#               apache-jmeter-5.6.2/bin/jmeter -n -t stress-test.jmx \
#                                             -l log/jmeter/stress-test-result.csv \
#                                             -e -f -o log/jmeter/stress-test-html-report \
#                                             -j log/jmeter/stress-test-jmeter.log
#             displayName: JMeter stress test
#           - bash: |
#               pwd
#               apache-jmeter-5.6.2/bin/jmeter -n -t endurance-test.jmx \
#                                             -l log/jmeter/endurance-test-result.csv \
#                                             -e -f -o log/jmeter/endurance-test-html-report \
#                                             -j log/jmeter/endurance-test-jmeter.log
#             displayName: JMeter endurance test
#           - task: ArchiveFiles@2
#             displayName: Archive JMeter stress test HTML report
#             inputs:
#               rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
#               includeRootFolder: false
#               archiveType: 'zip'
#               archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
#               verbose: true
#           - task: ArchiveFiles@2
#             displayName: Archive JMeter endurance test HTML report
#             inputs:
#               rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
#               includeRootFolder: false
#               archiveType: 'zip'
#               archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
#               verbose: true
#           - bash: |
#               rm -rf log/jmeter/stress-test-html-report
#               rm -rf log/jmeter/endurance-test-html-report
#               cd log/jmeter
#               pwd
#               ls -la
#             displayName: Delete original JMeter test HTML reports
#           - publish: $(System.DefaultWorkingDirectory)/log/jmeter
#             displayName: 'Publish JMeter logs'
#             artifact: drop-jmeter-logs

- stage: UITests
  displayName: UI Tests - Selenium
  jobs:
  - deployment: VMRunUITests
    displayName: Run UI Tests
    environment:
      name: test
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: 'Download Selenium'
            artifact: drop-uitests
          - task: Bash@3
            displayName: Selenium UI Tests
            inputs:
              targetType: 'inline'
              script: |
                unzip -o $(Pipeline.Workspace)/drop-uitest/$(Build.BuildId)-uitests.zip -d .
                sudo mkdir -p /var/log/selenium
                sudo chmod 664 /var/log/selenium
                
                sudo python3 -u uitests.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
                # copy selenium log file to $(System.DefaultWorkingDirectory)/log/selenium/
                cd $(System.DefaultWorkingDirectory)
                mkdir -p log/selenium
                pwd
                sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
                ls -la
          - publish: $(System.DefaultWorkingDirectory)/log/selenium
            displayName: 'Publish selenium logs'
            artifact: drop-selenium-logs

#--------------------------------------------#  
# DESTROY STAGE
#--------------------------------------------#  
# - stage: Destroy
#   jobs:
#   - job: DestroyInfrastructure
#     condition: false
#     steps:
#     #--------------------------------------------#  
#     # Use Terraform to create the Infrastructure      
#     # Install Terraform on the pipeline agent 
#     - task: TerraformInstaller@1
#       displayName: 'Terrafom installation'
#       inputs:
#         terraformVersion: 'latest'

#     # Install SSH key
#     - task: InstallSSHKey@0
#       displayName: Security Access
#       inputs:
#         knownHostsEntry: $(public_key)'
#         sshPublicKey: '$(public_key)'
#         sshKeySecureFile: 'id_rsa'
    
#     - task: Bash@3
#       displayName: Check environment variables
#       inputs:
#         targetType: 'inline'
#         script: 'env | sort'
#       env:
#         TF_VAR_access_key: '$(access_key)'
#         TF_VAR_client_id: '$(client_id)'
#         TF_VAR_client_secret: '$(client_secret)'
#         TF_VAR_subscription_id: '$(subscription_id)'
#         TF_VAR_tenant_id: '$(tenant_id)'
    
#     # Run Terraform Init on the pipeline agent 
#     # ToDo: Replace the resource group name, storage account name, and container name below
#     - task: TerraformTaskV4@4
#       displayName: 'Terrafom init'
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         backendType: azurerm
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
#         backendServiceArm: '$(azureServiceConnectionId)'
#         backendAzureRmResourceGroupName: 'tfstate-rg'
#         backendAzureRmStorageAccountName: 'udacitytfstate1422'
#         backendAzureRmContainerName: 'tfstate'
#         backendAzureRmKey: 'test.terraform.tfstate'

#     # ToDo: Change the workingDirectory path, as applicable to you
#     # Destroy the resources in Azure by running a separate pipeline. 
#     - task: TerraformTaskV4@4
#       displayName: Terraform destroy
#       inputs:
#         provider: 'azurerm'
#         command: 'destroy'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
#         environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
#       env:
#         TF_VAR_access_key: '$(access_key)'
#         TF_VAR_client_id: '$(client_id)'
#         TF_VAR_client_secret: '$(client_secret)'
#         TF_VAR_subscription_id: '$(subscription_id)'
#         TF_VAR_tenant_id: '$(tenant_id)'