{
	"info": {
		"_postman_id": "ad1c82f9-d911-407c-a007-bd54b650b30d",
		"name": "Validation Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28075"
	},
	"item": [
		{
			"name": "Get All Activities",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"var count = 30;",
							"",
							"pm.test(\"Found activities\", function () {",
							"    for (i = 0; i < count; i++) {",
							"        pm.expect(jsonData[i].ID).to.eql(i+1);",
							"    }",
							"});",
							"",
							"pm.test(\"Total activities found: \" + jsonData.length, function () {",
							"    pm.expect(jsonData.length).to.eql(count);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/Activities",
					"host": [
						"{{url}}"
					],
					"path": [
						"Activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Authors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"var count = 200;",
							"pm.test(\"Found authors\", function () {",
							"    for (i = 0; i < count; i++) {",
							"        pm.expect(jsonData[i].ID).to.eql(i+1);",
							"    }",
							"});",
							"",
							"pm.test(\"Total authors found: \" + jsonData.length, function () {",
							"    pm.expect(jsonData.length).to.gte(count);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/Authors",
					"host": [
						"{{url}}"
					],
					"path": [
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"var count = 200;",
							"",
							"pm.test(\"Found books\", function () {",
							"    for (i = 0; i < count; i++) {",
							"        pm.expect(jsonData[i].ID).to.eql(i+1);",
							"    }",
							"});",
							"",
							"pm.test(\"Total books found: \" + jsonData.length, function () {",
							"    pm.expect(jsonData.length).to.eql(count);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/Books",
					"host": [
						"{{url}}"
					],
					"path": [
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All CoverPhotos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"var expectedCoverPhotos = 200;",
							"",
							"pm.test(\"Found cover photos\", function () {",
							"    for (i = 0; i < expectedCoverPhotos; i++) {",
							"        pm.expect(jsonData[i].ID).to.eql(i+1);",
							"    }",
							"});",
							"",
							"pm.test(\"Total cover photos found: \" + jsonData.length, function () {",
							"    pm.expect(jsonData.length).to.eql(expectedCoverPhotos);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/CoverPhotos",
					"host": [
						"{{url}}"
					],
					"path": [
						"CoverPhotos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"let count = 10;",
							"",
							"pm.test(\"Found users\", function () {",
							"    for (i = 0; i < count; i++) {",
							"        pm.expect(jsonData[i].ID).to.eql(i+1);",
							"    }",
							"});",
							"",
							"pm.test(\"Total users found: \" + jsonData.length, function () {",
							"    pm.expect(jsonData.length).to.eql(count);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/Users",
					"host": [
						"{{url}}"
					],
					"path": [
						"Users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"let id = parseInt(pm.environment.get(\"id\"));",
							"",
							"pm.test(\"Create activity response body as expected\", function () {",
							"    pm.expect(jsonData.ID).to.eql(id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{id}},\r\n    \"title\": \"{{$randomLoremWords}}\",\r\n    \"dueDate\": \"2023-09-25T16:16:49.6800256+00:00\",\r\n    \"completed\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/Activities",
					"host": [
						"{{url}}"
					],
					"path": [
						"Activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"let id = parseInt(pm.environment.get(\"id\"));",
							"",
							"pm.test(\"Create author response body as expected\", function () {",
							"    pm.expect(jsonData.ID).to.eql(id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{id}},\r\n    \"idBook\": {{id}},\r\n    \"firstName\": \"First Name {{id}}\",\r\n    \"lastName\": \"Last Name {{id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/Authors",
					"host": [
						"{{url}}"
					],
					"path": [
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"let id = parseInt(pm.environment.get(\"id\"));",
							"",
							"pm.test(\"Create book response body as expected\", function () {",
							"    pm.expect(jsonData.ID).to.eql(id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{id}},\r\n    \"title\": \"Book {{id}}\",\r\n    \"description\": \"description\",\r\n    \"pageCount\": 100,\r\n    \"excerpt\": \"test data\",\r\n    \"publishDate\": \"2023-09-24T15:13:23.0601632+00:00\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/Books",
					"host": [
						"{{url}}"
					],
					"path": [
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create CoverPhoto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"let id = parseInt(pm.environment.get(\"id\"));",
							"",
							"pm.test(\"Create cover photo response body as expected\", function () {",
							"    pm.expect(jsonData.ID).to.eql(id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{id}},\r\n    \"idBook\": {{id}},\r\n    \"url\": \"https://placeholdit.imgix.net/~text?txtsize=33&txt=Book 1&w=250&h=350\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/CoverPhotos",
					"host": [
						"{{url}}"
					],
					"path": [
						"CoverPhotos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"let id = parseInt(pm.environment.get(\"id\"));",
							"",
							"pm.test(\"Create user response body as expected\", function () {",
							"    pm.expect(jsonData.ID).to.eql(id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{id}},\r\n    \"userName\": \"User {{id}}\",\r\n    \"password\": \"Password1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/Users",
					"host": [
						"{{url}}"
					],
					"path": [
						"Users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Activity with ID 3 as expected\", function () {",
							"    pm.expect(jsonData.ID).to.eql(3);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/Activities/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"Activities",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Author with ID 3 as expected\", function () {",
							"    pm.expect(jsonData.ID).to.eql(3);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/Authors/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"Authors",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Book with ID 3 as expected\", function () {",
							"    pm.expect(jsonData.ID).to.eql(3);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/Books/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"Books",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get CoverPhoto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Cover Photo with ID 3 as expected\", function () {",
							"    pm.expect(jsonData.ID).to.eql(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/CoverPhotos/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"CoverPhotos",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"User with ID 3 as expected\", function () {",
							"    pm.expect(jsonData.ID).to.eql(3);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/Users/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"Users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Update with ID 3 as expected\", function () {",
							"    pm.expect(jsonData.ID).to.eql(3);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{id}},\r\n    \"title\": \"{{$randomLoremWords}}\",\r\n    \"dueDate\": \"2023-09-29T16:03:54.712Z\",\r\n    \"completed\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/Activities/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"Activities",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Update with ID 3 as expected\", function () {",
							"    pm.expect(jsonData.ID).to.eql(3);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{id}},\r\n    \"idBook\": {{id}},\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/Authors/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"Authors",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Update with ID 3 as expected\", function () {",
							"    pm.expect(jsonData.ID).to.eql(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{id}},\r\n    \"title\": \"{{$randomLoremText}}\",\r\n    \"description\": \"{{$randomLoremSentence}}\",\r\n    \"pageCount\": 0,\r\n    \"excerpt\": \"{{$randomLoremSentence}}\",\r\n    \"publishDate\": \"2023-09-29T16:05:39.226Z\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/Books/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"Books",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update CoverPhoto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Update with ID 3 as expected\", function () {",
							"    pm.expect(jsonData.ID).to.eql(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{id}},\r\n    \"idBook\": {{id}},\r\n    \"url\": \"{{$randomUrl}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/CoverPhotos/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"CoverPhotos",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Update with ID 3 as expected\", function () {",
							"    pm.expect(jsonData.ID).to.eql(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{id}},\r\n  \"userName\": \"{{$randomUserName}}\",\r\n  \"password\": \"{{$randomPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/Users/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"Users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete activity response as expected\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/Activities/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"Activities",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete author response as expected\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/Authors/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"Authors",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete book response as expected\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/Books/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"Books",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete CoverPhoto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete cover photo response as expected\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/CoverPhotos/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"CoverPhotos",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete user response as expected\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/Users/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"Users",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}